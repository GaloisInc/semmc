This is a description of how to add new semantics descriptions to
semmc-arm.

* Overview

The semmc-arm semantics describe the semantic operation of both ARM
and Thumb opcodes.  The opcode definitions are taken from the
"ARMv8-A_ArchitectureReferenceManual__Issue_A_a" (ARM DDI 0487A.a
ID090413).  Various page and section references in the comments found
herein should be relative to this document.  Note that the first half
of this document refers to the AArch64 architecture, which is not
supported by semmc-arm: be sure that all references are to section E,
F, or G.  

Semantics definitions compile the Haskell DSL descriptions in the
BaseSemantics directory to generate semantics definitions files in
S-expression format (via the ~semmc-arm-genbase~ application).  These
files are then read in as "Formulas" with by semmc core and downstream
applications like macaw.  There are three distinct phases: build
semmc, run genbase, build macaw.

As a set of defined terms:

  * Operand :: an argument to an assembly instruction, roughly
               corresponding to a parameter to an assembly instruction.

  * Opcode :: a specific processor instruction along with the set of
              valid operands for that instruction.

  * Semantics :: a description of the impact of executing an
                 opcode (with operands), relating register and memory output
                 values to the input register and memory values
                 described by the operands.  Note that this is in
                 terms of the operands as variables, *not* in terms of
                 specific operand values (i.e. symbolic execution).

  * Instruction :: The representation of a specific assembly
                   instruction instance, with the corresponding
                   Opcode+Operand definitions and the specific values
                   for those Operands.  This would be obtained by
                   disassembling binary code, and has values for
                   literal Operands but still does not have specific
                   values for memory or register contents.

The S-expression intermediary files comprise an information flow
boundary: anything in the DSL that is not expressed in the
S-expression files is not relevant to the Formula.

** Single Static Assignment (SSA)

The DSL defines results in terms of Single Static Assigment (SSA) of
values.  Another way of saying this is that there are no branch
statements, only branch expressions.  If a value would be written to
one register or the other, the code would not generate:

#+BEGIN_EXAMPLE
   if true_expression
   then R1 = value
   else R2 = value
#+END_EXAMPLE

Intead, all assigment statements are always executed, and the value
expression determines what is written:

#+BEGIN_EXAMPLE
  R1 = if true_expression then value else R1
  R2 = if true_expression then R1 else value
#+END_EXAMPLE

There are also no loop statements, so any pseudocode loops must be
unrolled.  See ~TPUSH~ or ~TPOP~ for examples.  Note that these instructions
are likely the only loop-like instructions, but be aware that
loop unrolling is needed and don't worry about the specifics until you
need to.  Instructions with unbounded loops cannot be unrolled, and must
be represented as architecture-specific functions or statements in macaw.

* Opcode Pseudocode

The architecture document describes the semantics of each instruction
in terms of psuedo-code.  Each opcode in the manual has several
encodings (e.g. Encoding A1, Encoding T1, encoding T3, etc.).  The
psuedo-code is divided into two parts: there is one portion that
immediately follows a particular encoding, followed by general
pseudocode in the "Operation" section for each opcode.  The opcodes
share the "Operation" section functionality. The
~EncodingSpecificOperations()~ function referenced in this shared section refers
to the portion appearing immediately after each encoding.  For most
opcodes, this same separation is followed to maximize shared code.

The pseudocode in these sections often has "function calls" to other
pseudocode blocks, which are defined elsewhere.  Again, to maximize
code re-use and conform to the documentation as much as possible these
pseudocode functions are reproduced, often in the Pseudocode
subdirectory of the BaseSemantics directory.

Almost all pseudocode sections begin with an ~if ConditionPassed()
then~ statement.  The ~ConditionPassed()~ is used to check the
predicate bits for the Opcode against the processor's current
condition codes (e.g. N for negative value, Z for zero value, C for
carry bit, and V for underflow/overflow).  This ~if~ test is performed
automatically by the ~defineA32Opcode~ or ~defineT32Opcode~ DSL
introduction statement and therefore can be ignored.

* Dismantle Opcodes and Operands

The Opcodes and Operands are provided by dismantle-arm and
dismantle-thumb.  This generation is driven by tablegen data from the
LLVM project, so it is possible that each architecture instruction
could be represented by multiple opcodes representing different
behavior (e.g. pre-increment indexed access, post-increment indexed
access, and indexed access are designated by a couple of bits and
result in three separate dismantle opcodes).

Opcode definitions are not visible in the source, since they are
generated by the TemplateHaskell processing of the tablegen data, but
Operand definitions are present in the source for both ARM and Thumb
(the latter is built on top of the former and therefore borrows from
the former).  There are generally two types of operands: direct and
packed.

Example direct operands are
  * a GPR (or General Purpose Register)
  * A 16-bit immediate value that can be used directly

Example packed operands are
  * A ~t_addrmode_is4~ that encodes both an offset and a register
  * a ~modimm~ opcode that has 12 bits representing an 8 bit value
    that is rotated by the remaining 4 bit value.

* Defining Semantics

An ARM (A32) opcode is defined via the ~defineA32Opcode~ DSL
statement, and Thumb (T32) opcodes are correspondingly defined via the
~defineT32Opcode~ statement.

Direct operands can be used directly in the semantics definition, but
packed operands must be unpacked by "uf" or "uninterpreted functions".
Direct operands can be assigned native types, but packed operands
should be declared as an ~EPackedOperand~ with a corresponding name;
this name will only match the corresponding uf unpacking functions.
The uninterpreted functions are uninterpreted by the formula
representation, but are later interpreted in macaw to unpack arguments
dynamically.

Any opcode that has an effect outside of modifying registers or memory
(e.g. changing processor state such as interrupt level, mode or
exception level) cannot be represented in simple semantics; the
details for these instructions are handled by architecture-specific
uninterpreted functions at the macaw level.  Any of these instructions
should have a definition that contains only comment statements that
identify it as one of these special cases, and the actual semantics
implementation will be overridden at the macaw level.

** Supporting a new Operand

*** Direct Operand

  The operand must be described in the OperandClasses.hs file in two
  locations: one defines the operand variable and one declaring the
  SymToExprTag type family element.

  As an example, see
  [[https://github.com/GaloisInc/semmc/commit/a8cc2089617248909b402f7ba20dc04103b8c504]]
  which adds the ~imm0_15~ operand.

*** Packed operand

  The packed operand requires extra functionality to unpack and
  retrieve the values packed into the operand.  Some operands can have
  3 or 4 different values packed within them, some as small as a
  single bit.

  Start by adding the OperandClasses definitions as described for the
  Direct Operand above.

  Next, pick an ~EPackedType~ operand name to use for this type of
  operand in the ~ParamDef~ specifications.  This should be unique, and
  doesn't need to match any of the dismantle information for this
  operand.

  Check the dismantle-arm or dismantle-thumb operands file to find the
  type describing this operand.  In most cases, this will be a record
  with a field for each packed value, and there is also a ~...ToBits~
  function that can be used to obtain the core value.  Note that if
  the register field accessors are not exported, you will need to
  modify the module exports to include them and update dismantle,
  along with the submodule reference to dismantle in both semmc-arm
  and macaw-arm.

  Determine the name of an uninterpreted function to use to extract
  each packed value.

  Create an entry in SemMC/Architecture/ARM/UF.hs for each of these
  uninterpreted functions, setting the input type to the raw size
  (typically 32 bits, but sometime smaller) and the output type to the
  size for the field being extracted.

  In BaseSemantics/Helpers.hs, create an implementation of the DSL uf
  function for each packed value, which is are functions to call the
  UF.hs entries just created.  For any immediate values, these will
  return an ~Expr 'TBV~ type, but for register specifications these
  will return a ~Location 'TBV~.

  In SemMC/ARM.hs, create a ~locationFuncInterpretation~ for each of
  the UF.hs entries that were created; most simply need an
  ~exprInterpName~ to define the extraction function, but ones
  describing registers will also need a ~locationInterp~
  implementation.

  In SemMC/Architecture/ARM/Eval.hs, create the extraction functions
  that were just described in the ARM.hs file.  Each immediate will
  just need a single extractor, using the record field name, but the
  register also has the location function, which is largely
  boilerplate to do type recognition and re-packaging as a GPR.

  As an example, see
  [[https://github.com/GaloisInc/semmc/commit/3b928a8974547560ff4cab8d8f989397a413bc6d]]
  which adds the ~T_addrmode_is2~ operand, containing a register
  reference and a 5-bit immediate value.


** Supporting a new Opcode

   First ensure that all the operand types are supported.

   Opcode definitions (~defineA32Opcode~ or ~defineT32Opcode~) are
   grouped by type (e.g. memory, arithmetic, etc.) only to provide
   useful progress indicators; the definition can appear anywhere but
   it is customary to place it alphabetically within the appropriate
   instruction group.

   The define statement should have a ~ParamDef~ declaration for each
   operand with the appropriate type, followed by a function
   definition taking arguments corresponding to those ~ParamDef~
   declarations.

   After the define, the definition should contain zero or more of the
   following, in no specific order:

      * provide comments, conventionally minimally specifying the
        opcode name and the location in the manual for the definition.
      * declare inputs
      * define locations (memory or register) written to and the
        symbolic values written thereto.

   Updating the processor condition codes or the processor PC value
   are done via special operations, which are probably already encoded
   in Pseudocode operations that can just be called for this purpose.

   Once the definition has been written:

     1. Compile semmc-arm
     2. Run semmc-arm-genbase
        * This will perform some additional verification of the opcode
          definition before writing the S-expression files.
     3. Inspect the S-expression file to confirm it provides the
        expected functionality, and then add it to the git repo
        tracking (this helps to identify any future changes to
        semantics).
     4. Touch semmc/semmc-arm/src/SemMC/Architecture/ARM/Opcodes/InternalT32.hs and
        semmc/semmc-arm/src/SemMC/Architecture/ARM/Opcodes/InternalT32.hs to force
        a rebuild of semmc-arm (the TH code generator cannot tell when a new semantics
        file is added).
     5. Optionally, semmc-arm contains some tests that can be run
        (e.g. ~$ cabal test~).  At the present time, the
        ~semmc-arm-genbase~ performs equivalent functionality so
        there's not much need to run the tests at this point, but test
        updates are welcomed.  If tests *are* run, note that they will
        include Template Haskell incorporation of the semantics files
        generated by semmc-arm-genbase, so to ensure that the test
        code is fully up-to-date relative to any new semantics
        definitions, run a ~$ cabal clean~ first.
     6. Compile macaw-arm, which will incorporate the new semantics
        S-expression files via Template Haskell runs during the
        compilation.
     7. Run macaw-arm tests (e.g. ~$ cabal test~).

   As an example, see
   [[https://github.com/GaloisInc/semmc/commit/33b80be878e18d0b1024fd5d48f4b7a5dfd1a431]]
   which adds the Thumb TSTRHi opcode semantics.

