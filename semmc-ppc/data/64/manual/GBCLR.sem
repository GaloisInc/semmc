;; BCLR (XL-form, LK=0, AA=0)
;; Generic branch conditional to LR with arbitrary BO field
(let
 ((false
  (bvne #b0 #b0))
  (true
   (bveq #b0 #b0)))
 ((operands
  ((bh . 'I32imm)
   (bi . 'Crbitrc)
   (bo . 'U5imm)))
  (in
   ('CR 'CTR 'IP 'LNK))
  (defs
   (('IP
    (ite
     (andp
      (ite
       ((_ call "test_bit_dynamic.32")
        ((_ zero_extend 27)
         bo)
        #x00000004)
       (true)
       (ite
        ((_ call "test_bit_dynamic.32")
         ((_ zero_extend 27)
          bo)
         #x00000003)
        ((_ call "test_bit_dynamic.32")
         'CR
         ((_ zero_extend 27)
          (bvsub #b11111 bi)))
        (notp
         ((_ call "test_bit_dynamic.32")
          'CR
          ((_ zero_extend 27)
           (bvsub #b11111 bi))))))
      (ite
       ((_ call "test_bit_dynamic.32")
        ((_ zero_extend 27)
         bo)
        #x00000002)
       (true)
       (ite
        ((_ call "test_bit_dynamic.32")
         ((_ zero_extend 27)
          bo)
         #x00000001)
        (xorp
         (notp
          (bveq 'CTR #x0000000000000000))
         (true))
        (xorp
         (notp
          (bveq 'CTR #x0000000000000000))
         (false)))))
     (concat
      ((_ extract 63 2)
       'LNK)
      #b00)
     (bvadd 'IP #x0000000000000004)))))))
