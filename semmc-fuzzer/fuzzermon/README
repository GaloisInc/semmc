
fuzzermon
=========

This is the fuzzermon web application. It is written using the Python
Django web framework and its purpose is to accept test result reports
from semmc-fuzzer and let users look at the results in a web browser.

For more information on Django, see:

  https://docs.djangoproject.com/en/2.0/

Uploading new data
==================

The web application exposes an endpoint, /upload_batch, to which the
semmc-fuzzer tool issues an HTTP POST request. The body of the POST must
be a JSON-encoded batch of test results, and the format of the JSON
data must match the JSON serialization in SemMC.Fuzzer.Types for the
'Batch' data type. The corresponding decoder lives in views.py in this
web application.

Development
===========

To set up an Ubuntu Xenial development system:

 0) cd semmc/semmc-fuzzer/fuzzermon
 1) ./setup_dev.sh

This will install system packages and set up the python sandbox.
The default configuration will use a Postrges database but this is
not necessary for development. Instead, an SQLite database should
be used. To do this, check that fuzzermon/settings.py sets
DATABASES as follows:

  DATABASES = {
      'default': {
          'ENGINE': 'django.db.backends.sqlite3',
          'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
      }
  }

To set up a database schema,

 0) cd fuzzermon
 1) python manage.py migrate

Production deployment
=====================

This directory contains scripts and configuration files necessary to
completely deploy fuzzermon on an Ubuntu Xenial installation. To do so,
go to the target host:

 0) Log into account with sudo privilege
 1) git clone git@github.com:GaloisInc/semmc
 2) cd semmc/semmc-fuzzer/fuzzermon
 3) ./setup_production.sh

After the last step has finished and assuming all goes well, a new
account, 'fuzzermon', will be created and will run the fuzzermon web
service. It runs the service using the Python "gunicorn" WSGI server,
which in turn is proxied to by Apache. See the configuration files in
this directory in addition to setup_production.sh for details on how the
system is configured.

In particular, you'll probably want to add SSH public keys to the
authorized_keys file of the new 'fuzzermon' account to permit users to
log in and manage the fuzzermon instance.

Fuzzermon assumes a Postgres database in a production deployment,
and the setup script mentioned above also takes care of creating the
database and initializing its schema. The setup process also equips the
'fuzzermon' account with shell configuration to ensure that the python
environment necessary for running and working with the service is active
in the shell upon login.

To ensure that the Python application uses the correct database and
backend, check that fuzzermon/settings.py sets DATABASES accordingly:

  DATABASES = {
      'default': {
          'ENGINE': 'django.db.backends.postgresql',
          'NAME': 'fuzzermon',
      }
  }

Migrating the database
======================

In production:

 0) Log into the 'fuzzermon' account on the deployment system
 1) cd semmc/semmc-fuzzer/fuzzermon/fuzzermon
 2) git pull
 3) python manage.py migrate
 4) sudo systemctl restart gunicorn.service

In development:

 0) python manage.py migrate
